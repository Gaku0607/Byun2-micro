// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: member.proto

package pb

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for MemberService service

func NewMemberServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for MemberService service

type MemberService interface {
	//註冊
	Registey(ctx context.Context, in *RegisteyReq, opts ...client.CallOption) (*emptypb.Empty, error)
	//建立帳戶
	Create(ctx context.Context, in *CreateReq, opts ...client.CallOption) (*emptypb.Empty, error)
	//刪除帳戶
	Delete(ctx context.Context, in *DeleteReq, opts ...client.CallOption) (*emptypb.Empty, error)
	//修改帳戶
	Modity(ctx context.Context, in *ModityReq, opts ...client.CallOption) (*emptypb.Empty, error)
	//登入
	Login(ctx context.Context, in *LoginReq, opts ...client.CallOption) (*LoginResp, error)
	//獲取用戶清單
	MemberList(ctx context.Context, in *MemberListReq, opts ...client.CallOption) (*MemberListResp, error)
	//查詢用戶內容
	MemberInfo(ctx context.Context, in *MemberInfoReq, opts ...client.CallOption) (*MemberInfoResp, error)
}

type memberService struct {
	c    client.Client
	name string
}

func NewMemberService(name string, c client.Client) MemberService {
	return &memberService{
		c:    c,
		name: name,
	}
}

func (c *memberService) Registey(ctx context.Context, in *RegisteyReq, opts ...client.CallOption) (*emptypb.Empty, error) {
	req := c.c.NewRequest(c.name, "MemberService.Registey", in)
	out := new(emptypb.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberService) Create(ctx context.Context, in *CreateReq, opts ...client.CallOption) (*emptypb.Empty, error) {
	req := c.c.NewRequest(c.name, "MemberService.Create", in)
	out := new(emptypb.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberService) Delete(ctx context.Context, in *DeleteReq, opts ...client.CallOption) (*emptypb.Empty, error) {
	req := c.c.NewRequest(c.name, "MemberService.Delete", in)
	out := new(emptypb.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberService) Modity(ctx context.Context, in *ModityReq, opts ...client.CallOption) (*emptypb.Empty, error) {
	req := c.c.NewRequest(c.name, "MemberService.Modity", in)
	out := new(emptypb.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberService) Login(ctx context.Context, in *LoginReq, opts ...client.CallOption) (*LoginResp, error) {
	req := c.c.NewRequest(c.name, "MemberService.Login", in)
	out := new(LoginResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberService) MemberList(ctx context.Context, in *MemberListReq, opts ...client.CallOption) (*MemberListResp, error) {
	req := c.c.NewRequest(c.name, "MemberService.MemberList", in)
	out := new(MemberListResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberService) MemberInfo(ctx context.Context, in *MemberInfoReq, opts ...client.CallOption) (*MemberInfoResp, error) {
	req := c.c.NewRequest(c.name, "MemberService.MemberInfo", in)
	out := new(MemberInfoResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MemberService service

type MemberServiceHandler interface {
	//註冊
	Registey(context.Context, *RegisteyReq, *emptypb.Empty) error
	//建立帳戶
	Create(context.Context, *CreateReq, *emptypb.Empty) error
	//刪除帳戶
	Delete(context.Context, *DeleteReq, *emptypb.Empty) error
	//修改帳戶
	Modity(context.Context, *ModityReq, *emptypb.Empty) error
	//登入
	Login(context.Context, *LoginReq, *LoginResp) error
	//獲取用戶清單
	MemberList(context.Context, *MemberListReq, *MemberListResp) error
	//查詢用戶內容
	MemberInfo(context.Context, *MemberInfoReq, *MemberInfoResp) error
}

func RegisterMemberServiceHandler(s server.Server, hdlr MemberServiceHandler, opts ...server.HandlerOption) error {
	type memberService interface {
		Registey(ctx context.Context, in *RegisteyReq, out *emptypb.Empty) error
		Create(ctx context.Context, in *CreateReq, out *emptypb.Empty) error
		Delete(ctx context.Context, in *DeleteReq, out *emptypb.Empty) error
		Modity(ctx context.Context, in *ModityReq, out *emptypb.Empty) error
		Login(ctx context.Context, in *LoginReq, out *LoginResp) error
		MemberList(ctx context.Context, in *MemberListReq, out *MemberListResp) error
		MemberInfo(ctx context.Context, in *MemberInfoReq, out *MemberInfoResp) error
	}
	type MemberService struct {
		memberService
	}
	h := &memberServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&MemberService{h}, opts...))
}

type memberServiceHandler struct {
	MemberServiceHandler
}

func (h *memberServiceHandler) Registey(ctx context.Context, in *RegisteyReq, out *emptypb.Empty) error {
	return h.MemberServiceHandler.Registey(ctx, in, out)
}

func (h *memberServiceHandler) Create(ctx context.Context, in *CreateReq, out *emptypb.Empty) error {
	return h.MemberServiceHandler.Create(ctx, in, out)
}

func (h *memberServiceHandler) Delete(ctx context.Context, in *DeleteReq, out *emptypb.Empty) error {
	return h.MemberServiceHandler.Delete(ctx, in, out)
}

func (h *memberServiceHandler) Modity(ctx context.Context, in *ModityReq, out *emptypb.Empty) error {
	return h.MemberServiceHandler.Modity(ctx, in, out)
}

func (h *memberServiceHandler) Login(ctx context.Context, in *LoginReq, out *LoginResp) error {
	return h.MemberServiceHandler.Login(ctx, in, out)
}

func (h *memberServiceHandler) MemberList(ctx context.Context, in *MemberListReq, out *MemberListResp) error {
	return h.MemberServiceHandler.MemberList(ctx, in, out)
}

func (h *memberServiceHandler) MemberInfo(ctx context.Context, in *MemberInfoReq, out *MemberInfoResp) error {
	return h.MemberServiceHandler.MemberInfo(ctx, in, out)
}
